plugins {
    id 'java'
    id "org.sonarqube" version "3.3"
    id 'jacoco'
}

group = 'org.zerobs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.4.2'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.4.2'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.4.2'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.4.2'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server:2.4.2'

    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'

    implementation group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.954'
    implementation group: 'com.amazonaws.serverless', name: 'aws-serverless-java-container-springboot2', version: '1.5.2'

    implementation group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "Zero-BS_polla-java"
    }
}

tasks.named('sonarqube').configure {
    dependsOn test
}

task buildZip(type: Zip) {
    from compileJava
    from processResources
    into('lib') {
        from(configurations.compileClasspath) {
            exclude 'tomcat-embed-*'
        }
    }
}

build.dependsOn buildZip

test {
    exclude '**/*'
}